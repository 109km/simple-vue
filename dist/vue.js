!function(Q){var B={};function F(U){if(B[U])return B[U].exports;var s=B[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,F),s.l=!0,s.exports}F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{configurable:!1,enumerable:!0,get:U})},F.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="/dist/",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/directives/on.js\n/* harmony default export */ var on = ({\n  bind() {\n    const el = this.descriptor.el;\n    if (this.descriptor.arg === 'click') {\n      el.addEventListener('click', this.vm[this.descriptor.value].bind(this.vm));\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/directives/text.js\n/* harmony default export */ var directives_text = ({\n  bind() {},\n  update(value) {\n    const el = this.descriptor.el;\n    el.innerHTML = value;\n  }\n});\n// CONCATENATED MODULE: ./src/directives/model.js\n/* harmony default export */ var model = ({\n  bind() {\n    const el = this.descriptor.el;\n    el.addEventListener('input', () => {\n      this._watcher.set(el.value);\n    });\n  },\n  update(value) {\n    const el = this.descriptor.el;\n    el.value = value;\n  }\n});\n// CONCATENATED MODULE: ./src/compile.js\n\n\n\n\nconst onRe = /^v-on:|^@/;\nconst modelRe = /^v-model/;\nconst textRe = /^v-text/;\nconst dirAttrRe = /^v-([^:]+)(?:$|:(.*)$)/;\n\nconst compileDirectives = function (el, attrs) {\n  if (!attrs) return;\n  const dirs = [];\n\n  let i = attrs.length;\n\n  while (i--) {\n    const attr = attrs[i];\n    const name = attr.name;\n    const value = attr.value;\n    let arg = name;\n    if (name.match(dirAttrRe)) {\n      if (onRe.test(name)) {\n        arg = name.replace(onRe, '');\n        pushDir('on', on, arg, value);\n      } else if (modelRe.test(name)) {\n        arg = name.replace(modelRe, '');\n        pushDir('model', model, arg, value);\n      } else if (textRe.test(name)) {\n        arg = name.replace(textRe, '');\n        pushDir('text', directives_text, arg, value);\n      }\n    }\n  }\n\n  function pushDir(dirName, def, arg, value) {\n    dirs.push({\n      el: el,\n      name: dirName,\n      rawName: name,\n      arg: arg,\n      value: value,\n      rawValue: value,\n      expression: value\n    });\n  }\n\n  if (dirs.length) return makeNodeLinkFn(dirs);\n};\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el) {\n    let i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el);\n    }\n  };\n}\n\n// only for the root element\nconst compile = function (el, options) {\n  if (el.hasChildNodes()) return function (vm, el) {\n    const nodeLink = compileNode(el, options);\n    const childLink = compileNodeList(el.childNodes, options);\n    nodeLink && nodeLink(vm, el);\n    childLink && childLink(vm, el);\n    vm._directives.forEach(v => {\n      v._bind();\n    });\n  };else return function (vm, el) {\n    compileNode(el, options);\n    vm._directives.forEach(v => {\n      v._bind();\n    });\n  };\n};\n\nfunction compileNodeList(nodeList, options) {\n  const links = [];\n  for (var i = 0; i < nodeList.length; i++) {\n    const el = nodeList[i];\n    let link = compileNode(el, options);\n    link && links.push(link);\n    if (el.hasChildNodes()) {\n      link = compileNodeList(el.childNodes, options);\n      link && links.push(link);\n    }\n  }\n\n  return function (vm, el) {\n    let i = links.length;\n    while (i--) {\n      links[i](vm, el);\n    }\n  };\n}\n\nfunction compileNode(el, options) {\n  return compileDirectives(el, el.attributes);\n}\n// CONCATENATED MODULE: ./src/util.js\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n// CONCATENATED MODULE: ./src/dep.js\n/**\n * `Dep` class\n * Used for connecting data and watcher\n */\n\nlet uid = 0;\n\nclass Dep {\n  constructor() {\n    this.id = uid++;\n    this.subs = [];\n  }\n}\n\nDep.target = null;\n\n// Add sub watcher\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n// Add current Dep.target to `subs`\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\nDep.prototype.notify = function () {\n  let subs = this.subs;\n  let i = 0,\n      len = subs.length;\n\n  for (; i < len; i++) {\n    subs[i].update();\n  }\n};\n// CONCATENATED MODULE: ./src/watcher.js\n\n\nlet watcher_uid = 0;\n\nclass watcher_Watcher {\n  constructor(vm, expOrFn, cb) {\n    vm._watchers.push(this);\n    this.vm = vm;\n    this.expOrFn = expOrFn;\n    this.expression = expOrFn;\n    this.cb = cb;\n    this.id = ++watcher_uid;\n    this.deps = [];\n    this.depIds = new Set();\n    // Call `get` immediately when `watcher` instance is created\n    this.value = this.get();\n  }\n  getter() {\n    return this.vm[this.expOrFn];\n  }\n  setter(value) {\n    this.vm[this.expOrFn] = value;\n  }\n  update() {\n    this.run();\n  }\n  run() {\n    let value = this.get();\n    let oldValue = this.value;\n    // trigger only when value changes\n    if (value != oldValue) {\n      this.cb.call(this.vm, value, oldValue);\n    }\n  }\n  get() {\n    Dep.target = this;\n    let value = this.getter.call(this.vm);\n    Dep.target = null;\n    return value;\n  }\n  set(value) {\n    this.setter.call(this.vm, value);\n  }\n  addDep(dep) {\n    if (!this.depIds.has(dep.id)) {\n      this.deps.push(dep);\n      this.depIds.add(dep.id);\n      dep.addSub(this);\n    }\n  }\n}\n// CONCATENATED MODULE: ./src/directive.js\n\n\n\nclass directive_Directives {\n  constructor(descriptor, vm, el) {\n    this.descriptor = descriptor;\n    this.vm = vm;\n    this.el = el;\n    this.expression = descriptor.expression;\n  }\n\n  _bind() {\n    let def = this.descriptor.def;\n    if (typeof def === 'function') {\n      this.update = def;\n    } else {\n      extend(this, def);\n    }\n\n    if (this.bind) this.bind();\n    if (this.update) this.update();\n\n    if (this.update) {\n      const dir = this;\n      this._update = function (val, oldVal) {\n        dir.update(val, oldVal);\n      };\n    } else {\n      this._update = function () {};\n    }\n\n    let watcher = this._watcher = new watcher_Watcher(this.vm, this.expression, this._update);\n\n    if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n}\n// CONCATENATED MODULE: ./src/lifecycle.js\n\n\n\n/* harmony default export */ var lifecycle = (function (Vue) {\n\n  Vue.prototype._compile = function (el, options) {\n    const linkFn = compile(el, options);\n    if (linkFn) linkFn(this, el);\n  };\n\n  Vue.prototype._bindDir = function (descriptor, el) {\n    this._directives.push(new directive_Directives(descriptor, this, el));\n  };\n});\n// CONCATENATED MODULE: ./src/observe.js\n\n\n// class `Observer` \nclass observe_Observer {\n  constructor(value) {\n    this.value = value;\n    this.dep = new Dep();\n    this.walk(value);\n  }\n}\n\n// traverse object's each attribute\nobserve_Observer.prototype.walk = function (obj) {\n  let keys = Object.keys(obj),\n      i = 0,\n      len = keys.length;\n  for (; i < len; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\nobserve_Observer.prototype.convert = function (key, value) {\n  defineReactive(this.value, key, value);\n};\n\nobserve_Observer.prototype.addVm = function (vm) {\n  if (!this.vms) {\n    this.vms = [];\n  }\n  this.vms.push(vm);\n};\n\nfunction observe(value, vm) {\n  // `value` equals `data`\n  let ob = new observe_Observer(value);\n\n  // save vm\n  ob.addVm(vm);\n  return ob;\n}\n\n// Define reactive attribute\nfunction defineReactive(obj, key, value) {\n  let dep = new Dep();\n\n  let property = Object.getOwnPropertyDescriptor(obj, key);\n\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  let getter = property && property.get;\n  let setter = property && property.set;\n\n  // collect dependencies\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get() {\n      let val = getter ? getter.call(obj) : val;\n      // If is triggered by inner collecting dependencies progress\n      if (Dep.target) {\n        dep.depend();\n      }\n      return val;\n    },\n    set(newVal) {\n      let val = getter ? getter.call(obj) : val;\n      if (newVal === val) {\n        return;\n      }\n      val = newVal;\n\n      // If changed, trigger dependencies\n      dep.notify();\n    }\n  });\n}\n// CONCATENATED MODULE: ./src/state.js\n\n\n/* harmony default export */ var state = (function (Vue) {\n\n  // proxy `this.$data.xxx` to `this._data.xxx`\n  Object.defineProperty(Vue.prototype, '$data', {\n    get() {\n      return this._data;\n    },\n    set(newData) {\n      if (newData != this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  // Init state\n  Vue.prototype._initState = function () {\n    this._initData();\n  };\n\n  // Init data\n  Vue.prototype._initData = function () {\n\n    // if `data` is pure function could be much better\n    let dataFn = this.$options.data;\n\n    let data = this._data = dataFn ? typeof dataFn === 'function' ? dataFn() : dataFn : {};\n\n    let keys = Object.keys(data);\n\n    let len = keys.length;\n    let i, key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      // proxy this attribute to `this._data.xxx`\n      // so that data's source is all from `this._data`\n      this._proxy(key);\n    }\n\n    // observe `data` object\n    observe(data, this);\n  };\n\n  // proxy `this.xxx` to `this._data.xxx`\n  Vue.prototype._proxy = function (key) {\n    let _this = this;\n    Object.defineProperty(_this, key, {\n      enumerable: true,\n      configurable: true,\n      get() {\n        return _this._data[key];\n      },\n      set(newData) {\n        _this._data[key] = newData;\n      }\n    });\n  };\n});\n// CONCATENATED MODULE: ./src/vue.js\n\n\n\nclass vue_Vue {\n  constructor(options) {\n    this.init(options);\n  }\n\n  // init the instance\n  init(options) {\n    this._directives = [];\n    this._watchers = [];\n\n    let el = document.querySelector(options.el);\n\n    this.$options = options;\n\n    for (let k in options.methods) {\n      this[k] = options.methods[k];\n    }\n\n    // init state\n    this._initState();\n\n    // compile html to el\n    this._compile(el, options);\n  }\n\n}\n\nstate(vue_Vue);\nlifecycle(vue_Vue);\n\nwindow.Vue = vue_Vue;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlcy9vbi5qcz9kOWIzIiwid2VicGFjazovLy8uL3NyYy9kaXJlY3RpdmVzL3RleHQuanM/NDBjMiIsIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlcy9tb2RlbC5qcz84YTU4Iiwid2VicGFjazovLy8uL3NyYy9jb21waWxlLmpzPzM0MjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwuanM/ZTBlYiIsIndlYnBhY2s6Ly8vLi9zcmMvZGVwLmpzPzc0NGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dhdGNoZXIuanM/NzBhZSIsIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlLmpzPzhiNDciLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpZmVjeWNsZS5qcz84MTA2Iiwid2VicGFjazovLy8uL3NyYy9vYnNlcnZlLmpzP2IwNDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlLmpzP2ZhYWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Z1ZS5qcz9jMDMzIl0sIm5hbWVzIjpbImJpbmQiLCJlbCIsImRlc2NyaXB0b3IiLCJhcmciLCJhZGRFdmVudExpc3RlbmVyIiwidm0iLCJ2YWx1ZSIsInVwZGF0ZSIsImlubmVySFRNTCIsIl93YXRjaGVyIiwic2V0Iiwib25SZSIsIm1vZGVsUmUiLCJ0ZXh0UmUiLCJkaXJBdHRyUmUiLCJjb21waWxlRGlyZWN0aXZlcyIsImF0dHJzIiwiZGlycyIsImkiLCJsZW5ndGgiLCJhdHRyIiwibmFtZSIsIm1hdGNoIiwidGVzdCIsInJlcGxhY2UiLCJwdXNoRGlyIiwiZGlyTmFtZSIsImRlZiIsInB1c2giLCJyYXdOYW1lIiwicmF3VmFsdWUiLCJleHByZXNzaW9uIiwibWFrZU5vZGVMaW5rRm4iLCJkaXJlY3RpdmVzIiwibm9kZUxpbmtGbiIsIl9iaW5kRGlyIiwiY29tcGlsZSIsIm9wdGlvbnMiLCJoYXNDaGlsZE5vZGVzIiwibm9kZUxpbmsiLCJjb21waWxlTm9kZSIsImNoaWxkTGluayIsImNvbXBpbGVOb2RlTGlzdCIsImNoaWxkTm9kZXMiLCJfZGlyZWN0aXZlcyIsImZvckVhY2giLCJ2IiwiX2JpbmQiLCJub2RlTGlzdCIsImxpbmtzIiwibGluayIsImF0dHJpYnV0ZXMiLCJleHRlbmQiLCJ0byIsImZyb20iLCJrZXlzIiwiT2JqZWN0IiwidWlkIiwiRGVwIiwiY29uc3RydWN0b3IiLCJpZCIsInN1YnMiLCJ0YXJnZXQiLCJwcm90b3R5cGUiLCJhZGRTdWIiLCJzdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJyZW1vdmVTdWIiLCIkcmVtb3ZlIiwibm90aWZ5IiwibGVuIiwiZXhwT3JGbiIsImNiIiwiX3dhdGNoZXJzIiwiZGVwcyIsImRlcElkcyIsIlNldCIsImdldCIsImdldHRlciIsInNldHRlciIsInJ1biIsIm9sZFZhbHVlIiwiY2FsbCIsImRlcCIsImhhcyIsImFkZCIsImRpciIsIl91cGRhdGUiLCJ2YWwiLCJvbGRWYWwiLCJ3YXRjaGVyIiwiVnVlIiwiX2NvbXBpbGUiLCJsaW5rRm4iLCJ3YWxrIiwiT2JzZXJ2ZXIiLCJvYmoiLCJjb252ZXJ0Iiwia2V5IiwiZGVmaW5lUmVhY3RpdmUiLCJhZGRWbSIsInZtcyIsIm9ic2VydmUiLCJvYiIsInByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwibmV3VmFsIiwiX2RhdGEiLCJuZXdEYXRhIiwiX3NldERhdGEiLCJfaW5pdFN0YXRlIiwiX2luaXREYXRhIiwiZGF0YUZuIiwiJG9wdGlvbnMiLCJkYXRhIiwiX3Byb3h5IiwiX3RoaXMiLCJpbml0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiayIsIm1ldGhvZHMiLCJzdGF0ZSIsImxpZmVjeWNsZSIsIndpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWU7QUFDYkEsU0FBTztBQUNMLFVBQU1DLEtBQUssS0FBS0MsVUFBTCxDQUFnQkQsRUFBM0I7QUFDQSxRQUFJLEtBQUtDLFVBQUwsQ0FBZ0JD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SUFBVXZGLFFBQVF3RixPQUFSLENBQWdCRCxDQUFoQixDQUFWO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFLVixVQUFMOztBQUVBO0FBQ0EsU0FBS3JCLFFBQUwsQ0FBYzVGLEVBQWQsRUFBa0JvQyxPQUFsQjtBQUVEOztBQXhCTzs7QUE0QlYsS0FBQXlGLENBQU0sT0FBTjtBQUNBLFNBQUFDLENBQVUsT0FBVjs7QUFFQUMsT0FBT3BDLEdBQVAsR0FBYSxPQUFiIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGJpbmQoKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmRlc2NyaXB0b3IuZWxcbiAgICBpZiAodGhpcy5kZXNjcmlwdG9yLmFyZyA9PT0gJ2NsaWNrJykge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnZtW3RoaXMuZGVzY3JpcHRvci52YWx1ZV0uYmluZCh0aGlzLnZtKSlcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGJpbmQoKSB7fSxcbiAgdXBkYXRlKHZhbHVlKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmRlc2NyaXB0b3IuZWxcbiAgICBlbC5pbm5lckhUTUwgPSB2YWx1ZVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBiaW5kKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcy5kZXNjcmlwdG9yLmVsXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICB0aGlzLl93YXRjaGVyLnNldChlbC52YWx1ZSlcbiAgICB9KVxuICB9LFxuICB1cGRhdGUodmFsdWUpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZGVzY3JpcHRvci5lbFxuICAgIGVsLnZhbHVlID0gdmFsdWVcbiAgfVxufSIsImltcG9ydCBkaXJPbiBmcm9tICcuL2RpcmVjdGl2ZXMvb24uanMnXG5pbXBvcnQgZGlyVGV4dCBmcm9tICcuL2RpcmVjdGl2ZXMvdGV4dC5qcydcbmltcG9ydCBkaXJNb2RlbCBmcm9tICcuL2RpcmVjdGl2ZXMvbW9kZWwuanMnXG5cbmNvbnN0IG9uUmUgPSAvXnYtb246fF5AL1xuY29uc3QgbW9kZWxSZSA9IC9edi1tb2RlbC9cbmNvbnN0IHRleHRSZSA9IC9edi10ZXh0L1xuY29uc3QgZGlyQXR0clJlID0gL152LShbXjpdKykoPzokfDooLiopJCkvXG5cbmV4cG9ydCBjb25zdCBjb21waWxlRGlyZWN0aXZlcyA9IGZ1bmN0aW9uKGVsLCBhdHRycykge1xuICBpZiAoIWF0dHJzKSByZXR1cm5cbiAgY29uc3QgZGlycyA9IFtdXG5cbiAgbGV0IGkgPSBhdHRycy5sZW5ndGhcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgY29uc3QgYXR0ciA9IGF0dHJzW2ldXG4gICAgY29uc3QgbmFtZSA9IGF0dHIubmFtZVxuICAgIGNvbnN0IHZhbHVlID0gYXR0ci52YWx1ZVxuICAgIGxldCBhcmcgPSBuYW1lXG4gICAgaWYgKG5hbWUubWF0Y2goZGlyQXR0clJlKSkge1xuICAgICAgaWYgKG9uUmUudGVzdChuYW1lKSkge1xuICAgICAgICBhcmcgPSBuYW1lLnJlcGxhY2Uob25SZSwgJycpXG4gICAgICAgIHB1c2hEaXIoJ29uJywgZGlyT24sIGFyZywgdmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKG1vZGVsUmUudGVzdChuYW1lKSkge1xuICAgICAgICBhcmcgPSBuYW1lLnJlcGxhY2UobW9kZWxSZSwgJycpXG4gICAgICAgIHB1c2hEaXIoJ21vZGVsJywgZGlyTW9kZWwsIGFyZywgdmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKHRleHRSZS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIGFyZyA9IG5hbWUucmVwbGFjZSh0ZXh0UmUsICcnKVxuICAgICAgICBwdXNoRGlyKCd0ZXh0JywgZGlyVGV4dCwgYXJnLCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRGlyKGRpck5hbWUsIGRlZiwgYXJnLCB2YWx1ZSkge1xuICAgIGRpcnMucHVzaCh7XG4gICAgICBlbDogZWwsXG4gICAgICBuYW1lOiBkaXJOYW1lLFxuICAgICAgcmF3TmFtZTogbmFtZSxcbiAgICAgIGFyZzogYXJnLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmF3VmFsdWU6IHZhbHVlLFxuICAgICAgZXhwcmVzc2lvbjogdmFsdWVcbiAgICB9KVxuICB9XG5cbiAgaWYgKGRpcnMubGVuZ3RoKSByZXR1cm4gbWFrZU5vZGVMaW5rRm4oZGlycylcblxufVxuXG5mdW5jdGlvbiBtYWtlTm9kZUxpbmtGbihkaXJlY3RpdmVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBub2RlTGlua0ZuKHZtLCBlbCkge1xuICAgIGxldCBpID0gZGlyZWN0aXZlcy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fYmluZERpcihkaXJlY3RpdmVzW2ldLCBlbClcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSBmb3IgdGhlIHJvb3QgZWxlbWVudFxuZXhwb3J0IGNvbnN0IGNvbXBpbGUgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICBpZiAoZWwuaGFzQ2hpbGROb2RlcygpKSByZXR1cm4gZnVuY3Rpb24odm0sIGVsKSB7XG4gICAgY29uc3Qgbm9kZUxpbmsgPSBjb21waWxlTm9kZShlbCwgb3B0aW9ucylcbiAgICBjb25zdCBjaGlsZExpbmsgPSBjb21waWxlTm9kZUxpc3QoZWwuY2hpbGROb2Rlcywgb3B0aW9ucylcbiAgICBub2RlTGluayAmJiBub2RlTGluayh2bSwgZWwpXG4gICAgY2hpbGRMaW5rICYmIGNoaWxkTGluayh2bSwgZWwpXG4gICAgdm0uX2RpcmVjdGl2ZXMuZm9yRWFjaCgodikgPT4ge1xuICAgICAgdi5fYmluZCgpXG4gICAgfSlcbiAgfVxuICBlbHNlIHJldHVybiBmdW5jdGlvbih2bSwgZWwpIHtcbiAgICBjb21waWxlTm9kZShlbCwgb3B0aW9ucylcbiAgICB2bS5fZGlyZWN0aXZlcy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICB2Ll9iaW5kKClcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVOb2RlTGlzdChub2RlTGlzdCwgb3B0aW9ucykge1xuICBjb25zdCBsaW5rcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbCA9IG5vZGVMaXN0W2ldXG4gICAgbGV0IGxpbmsgPSBjb21waWxlTm9kZShlbCwgb3B0aW9ucylcbiAgICBsaW5rICYmIGxpbmtzLnB1c2gobGluaylcbiAgICBpZiAoZWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBsaW5rID0gY29tcGlsZU5vZGVMaXN0KGVsLmNoaWxkTm9kZXMsIG9wdGlvbnMpXG4gICAgICBsaW5rICYmIGxpbmtzLnB1c2gobGluaylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odm0sIGVsKSB7XG4gICAgbGV0IGkgPSBsaW5rcy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBsaW5rc1tpXSh2bSwgZWwpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVOb2RlKGVsLCBvcHRpb25zKSB7XG4gIHJldHVybiBjb21waWxlRGlyZWN0aXZlcyhlbCwgZWwuYXR0cmlidXRlcylcbn0iLCJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHRvLCBmcm9tKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSlcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aFxuICB3aGlsZSAoaS0tKSB7XG4gICAgdG9ba2V5c1tpXV0gPSBmcm9tW2tleXNbaV1dXG4gIH1cbiAgcmV0dXJuIHRvXG59IiwiLyoqXG4gKiBgRGVwYCBjbGFzc1xuICogVXNlZCBmb3IgY29ubmVjdGluZyBkYXRhIGFuZCB3YXRjaGVyXG4gKi9cblxubGV0IHVpZCA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pZCA9IHVpZCsrXG4gICAgdGhpcy5zdWJzID0gW11cbiAgfVxufVxuXG5EZXAudGFyZ2V0ID0gbnVsbFxuXG4vLyBBZGQgc3ViIHdhdGNoZXJcbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24oc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yilcbn1cblxuLy8gQWRkIGN1cnJlbnQgRGVwLnRhcmdldCB0byBgc3Vic2BcbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24oKSB7XG4gIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpXG59XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24oc3ViKSB7XG4gIHRoaXMuc3Vicy4kcmVtb3ZlKHN1Yilcbn1cblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHN1YnMgPSB0aGlzLnN1YnNcbiAgbGV0IGkgPSAwLFxuICAgIGxlbiA9IHN1YnMubGVuZ3RoXG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKClcbiAgfVxufSIsImltcG9ydCBEZXAgZnJvbSAnLi9kZXAuanMnXG5cbmxldCB1aWQgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdGNoZXIge1xuICBjb25zdHJ1Y3Rvcih2bSwgZXhwT3JGbiwgY2IpIHtcbiAgICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKVxuICAgIHRoaXMudm0gPSB2bVxuICAgIHRoaXMuZXhwT3JGbiA9IGV4cE9yRm5cbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHBPckZuXG4gICAgdGhpcy5jYiA9IGNiXG4gICAgdGhpcy5pZCA9ICsrdWlkXG4gICAgdGhpcy5kZXBzID0gW11cbiAgICB0aGlzLmRlcElkcyA9IG5ldyBTZXQoKVxuICAgIC8vIENhbGwgYGdldGAgaW1tZWRpYXRlbHkgd2hlbiBgd2F0Y2hlcmAgaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpXG4gIH1cbiAgZ2V0dGVyKCkge1xuICAgIHJldHVybiB0aGlzLnZtW3RoaXMuZXhwT3JGbl1cbiAgfVxuICBzZXR0ZXIodmFsdWUpIHtcbiAgICB0aGlzLnZtW3RoaXMuZXhwT3JGbl0gPSB2YWx1ZVxuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnJ1bigpXG4gIH1cbiAgcnVuKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0KClcbiAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLnZhbHVlXG4gICAgLy8gdHJpZ2dlciBvbmx5IHdoZW4gdmFsdWUgY2hhbmdlc1xuICAgIGlmICh2YWx1ZSAhPSBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSlcbiAgICB9XG4gIH1cbiAgZ2V0KCkge1xuICAgIERlcC50YXJnZXQgPSB0aGlzXG4gICAgbGV0IHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh0aGlzLnZtKVxuICAgIERlcC50YXJnZXQgPSBudWxsXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgc2V0KHZhbHVlKSB7XG4gICAgdGhpcy5zZXR0ZXIuY2FsbCh0aGlzLnZtLCB2YWx1ZSlcbiAgfVxuICBhZGREZXAoZGVwKSB7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgdGhpcy5kZXBzLnB1c2goZGVwKVxuICAgICAgdGhpcy5kZXBJZHMuYWRkKGRlcC5pZClcbiAgICAgIGRlcC5hZGRTdWIodGhpcylcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQge1xuICBleHRlbmRcbn0gZnJvbSAnLi91dGlsLmpzJ1xuaW1wb3J0IFdhdGNoZXIgZnJvbSAnLi93YXRjaGVyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXJlY3RpdmVzIHtcbiAgY29uc3RydWN0b3IoZGVzY3JpcHRvciwgdm0sIGVsKSB7XG4gICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvclxuICAgIHRoaXMudm0gPSB2bVxuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGRlc2NyaXB0b3IuZXhwcmVzc2lvblxuICB9XG4gIFxuICBfYmluZCgpIHtcbiAgICBsZXQgZGVmID0gdGhpcy5kZXNjcmlwdG9yLmRlZlxuICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnVwZGF0ZSA9IGRlZlxuICAgIH0gZWxzZSB7XG4gICAgICBleHRlbmQodGhpcywgZGVmKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmJpbmQpIHRoaXMuYmluZCgpXG4gICAgaWYgKHRoaXMudXBkYXRlKSB0aGlzLnVwZGF0ZSgpXG5cbiAgICBpZiAodGhpcy51cGRhdGUpIHtcbiAgICAgIGNvbnN0IGRpciA9IHRoaXNcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG4gICAgICAgIGRpci51cGRhdGUodmFsLCBvbGRWYWwpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uKCkge31cbiAgICB9XG5cbiAgICBsZXQgd2F0Y2hlciA9IHRoaXMuX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih0aGlzLnZtLCB0aGlzLmV4cHJlc3Npb24sIHRoaXMuX3VwZGF0ZSlcblxuICAgIGlmICh0aGlzLnVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGUod2F0Y2hlci52YWx1ZSlcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQge1xuICBjb21waWxlXG59IGZyb20gJy4vY29tcGlsZS5qcydcbmltcG9ydCBEaXJlY3RpdmVzIGZyb20gJy4vZGlyZWN0aXZlLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihWdWUpIHtcblxuICBWdWUucHJvdG90eXBlLl9jb21waWxlID0gZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsaW5rRm4gPSBjb21waWxlKGVsLCBvcHRpb25zKVxuICAgIGlmIChsaW5rRm4pIGxpbmtGbih0aGlzLCBlbClcbiAgfVxuXG4gIFZ1ZS5wcm90b3R5cGUuX2JpbmREaXIgPSBmdW5jdGlvbihkZXNjcmlwdG9yLCBlbCkge1xuICAgIHRoaXMuX2RpcmVjdGl2ZXMucHVzaChuZXcgRGlyZWN0aXZlcyhkZXNjcmlwdG9yLCB0aGlzLCBlbCkpXG4gIH1cblxufSIsImltcG9ydCBEZXAgZnJvbSAnLi9kZXAuanMnXG5cbi8vIGNsYXNzIGBPYnNlcnZlcmAgXG5jbGFzcyBPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5kZXAgPSBuZXcgRGVwKClcbiAgICB0aGlzLndhbGsodmFsdWUpXG4gIH1cbn1cblxuLy8gdHJhdmVyc2Ugb2JqZWN0J3MgZWFjaCBhdHRyaWJ1dGVcbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24ob2JqKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMob2JqKSxcbiAgICBpID0gMCxcbiAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHRoaXMuY29udmVydChrZXlzW2ldLCBvYmpba2V5c1tpXV0pXG4gIH1cbn1cblxuT2JzZXJ2ZXIucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gIGRlZmluZVJlYWN0aXZlKHRoaXMudmFsdWUsIGtleSwgdmFsdWUpXG59XG5cbk9ic2VydmVyLnByb3RvdHlwZS5hZGRWbSA9IGZ1bmN0aW9uKHZtKSB7XG4gIGlmICghdGhpcy52bXMpIHtcbiAgICB0aGlzLnZtcyA9IFtdXG4gIH1cbiAgdGhpcy52bXMucHVzaCh2bSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmUodmFsdWUsIHZtKSB7XG4gIC8vIGB2YWx1ZWAgZXF1YWxzIGBkYXRhYFxuICBsZXQgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpXG5cbiAgLy8gc2F2ZSB2bVxuICBvYi5hZGRWbSh2bSlcbiAgcmV0dXJuIG9iXG59XG5cbi8vIERlZmluZSByZWFjdGl2ZSBhdHRyaWJ1dGVcbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlKG9iaiwga2V5LCB2YWx1ZSkge1xuICBsZXQgZGVwID0gbmV3IERlcCgpXG5cbiAgbGV0IHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSlcblxuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgbGV0IGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldFxuICBsZXQgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0XG5cbiAgLy8gY29sbGVjdCBkZXBlbmRlbmNpZXNcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgbGV0IHZhbCA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWxcbiAgICAgIC8vIElmIGlzIHRyaWdnZXJlZCBieSBpbm5lciBjb2xsZWN0aW5nIGRlcGVuZGVuY2llcyBwcm9ncmVzc1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpXG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsXG4gICAgfSxcbiAgICBzZXQobmV3VmFsKSB7XG4gICAgICBsZXQgdmFsID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbFxuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFsID0gbmV3VmFsXG5cbiAgICAgIC8vIElmIGNoYW5nZWQsIHRyaWdnZXIgZGVwZW5kZW5jaWVzXG4gICAgICBkZXAubm90aWZ5KClcbiAgICB9XG4gIH0pXG59IiwiaW1wb3J0IHtvYnNlcnZlfSBmcm9tICcuL29ic2VydmUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKFZ1ZSkge1xuXG4gIC8vIHByb3h5IGB0aGlzLiRkYXRhLnh4eGAgdG8gYHRoaXMuX2RhdGEueHh4YFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kYXRhXG4gICAgfSxcbiAgICBzZXQobmV3RGF0YSkge1xuICAgICAgaWYgKG5ld0RhdGEgIT0gdGhpcy5fZGF0YSkge1xuICAgICAgICB0aGlzLl9zZXREYXRhKG5ld0RhdGEpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIC8vIEluaXQgc3RhdGVcbiAgVnVlLnByb3RvdHlwZS5faW5pdFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5faW5pdERhdGEoKVxuICB9XG5cbiAgLy8gSW5pdCBkYXRhXG4gIFZ1ZS5wcm90b3R5cGUuX2luaXREYXRhID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBpZiBgZGF0YWAgaXMgcHVyZSBmdW5jdGlvbiBjb3VsZCBiZSBtdWNoIGJldHRlclxuICAgIGxldCBkYXRhRm4gPSB0aGlzLiRvcHRpb25zLmRhdGFcblxuICAgIGxldCBkYXRhID0gdGhpcy5fZGF0YSA9IGRhdGFGbiA/ICh0eXBlb2YgZGF0YUZuID09PSAnZnVuY3Rpb24nID8gZGF0YUZuKCkgOiBkYXRhRm4pIDoge31cblxuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcblxuICAgIGxldCBsZW4gPSBrZXlzLmxlbmd0aFxuICAgIGxldCBpLCBrZXlcbiAgICBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV1cbiAgICAgIC8vIHByb3h5IHRoaXMgYXR0cmlidXRlIHRvIGB0aGlzLl9kYXRhLnh4eGBcbiAgICAgIC8vIHNvIHRoYXQgZGF0YSdzIHNvdXJjZSBpcyBhbGwgZnJvbSBgdGhpcy5fZGF0YWBcbiAgICAgIHRoaXMuX3Byb3h5KGtleSlcbiAgICB9XG5cbiAgICAvLyBvYnNlcnZlIGBkYXRhYCBvYmplY3RcbiAgICBvYnNlcnZlKGRhdGEsIHRoaXMpXG4gIH1cblxuICAvLyBwcm94eSBgdGhpcy54eHhgIHRvIGB0aGlzLl9kYXRhLnh4eGBcbiAgVnVlLnByb3RvdHlwZS5fcHJveHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZGF0YVtrZXldXG4gICAgICB9LFxuICAgICAgc2V0KG5ld0RhdGEpIHtcbiAgICAgICAgX3RoaXMuX2RhdGFba2V5XSA9IG5ld0RhdGFcbiAgICAgIH1cbiAgICB9KVxuICB9XG59IiwiaW1wb3J0IGxpZmVjeWNsZSBmcm9tICcuL2xpZmVjeWNsZSdcbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlJ1xuXG5jbGFzcyBWdWUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KG9wdGlvbnMpXG4gIH1cblxuICAvLyBpbml0IHRoZSBpbnN0YW5jZVxuICBpbml0KG9wdGlvbnMpIHtcbiAgICB0aGlzLl9kaXJlY3RpdmVzID0gW11cbiAgICB0aGlzLl93YXRjaGVycyA9IFtdXG5cbiAgICBsZXQgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuZWwpXG5cbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9uc1xuXG4gICAgZm9yIChsZXQgayBpbiBvcHRpb25zLm1ldGhvZHMpIHtcbiAgICAgIHRoaXNba10gPSBvcHRpb25zLm1ldGhvZHNba11cbiAgICB9XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5faW5pdFN0YXRlKClcblxuICAgIC8vIGNvbXBpbGUgaHRtbCB0byBlbFxuICAgIHRoaXMuX2NvbXBpbGUoZWwsIG9wdGlvbnMpXG5cbiAgfVxuXG59XG5cbnN0YXRlKFZ1ZSlcbmxpZmVjeWNsZShWdWUpXG5cbndpbmRvdy5WdWUgPSBWdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")}]);